---
title: "Research Updates 2"
author: "<b>Project Lead:</b> Mark Joseph Garrovillas, RCh </br> <b>Interns:</b> Brylle Joshua Logro√±o, John Matthew Felices, Yenzy Urson Hebron"
date: "July 14 2023"
institution: "Core Facility for Bioinformatics"
format: 
  revealjs:
    date-format: long
    slide-number: c/t
    width: 1920
    height: 1080
    theme: [default, custom.scss]
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    preview-links: auto
    slide-level: 3
    multiplex: true
    chalkboard: 
      boardmarker-width: 5
    search:
    transition: slide
    background-transition: fade
    transition-speed: slow
title-slide-attributes:
      data-background-image: presentation_files/img/PGCTitleSlideDark.svg
      data-background-size: cover
      data-background-color: "#5E205E"
      transition: slide
      background-transition: fade
      transition-speed: slow
---

# Performance Evaluation and Optimization of an Unsupervised Machine Learning Workflow for Discriminating Major COVID-19 Variants of Concern in the Philippines{background-color="#5E205E" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="fade-in slide-out" transition-speed="slow"}

## Modification of the pipeline to better visualize different SARS-CoV-2 Variants in the PH {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
![](presentation_files/img/variants.jpg){.fragment fig-align="center" height=50% width=50%}

## The sample pipeline discriminates between COVID19 variants using an unsupervised machine learning framework {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
![](presentation_files/img/journal.pone.0285719.png){.fragment fig-align="center" height=40% width=40%}

## Which linear algebra library implementation (BLAS,LAPACK,OpenCL,IntelMLK) gives the most optimal runtime for the workflow? {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
![](presentation_files/img/linear-algebra.jpg){.fragment fig-align="center" height=60% width=60%}

## Does processor vulnerability mitigations (Spectre and Meltdown) significantly affect the runtime of the workflow? {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
![](presentation_files/img/spectre_meltdown.png){.fragment fig-align="center" height=60% width=60%}

# Progress Report - Overview {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## The team's trello board gives an overview of the team's progress {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

![](presentation_files/img/trello.png){.fragment fig-align="center" height=70% width=70%}

## The burndown chart shows if the team is on track to finish the project on time {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
<iframe src="https://docs.google.com/spreadsheets/d/1e_8Idq3GNALJlM27_xZwYv2O2Rsih5MytwXbmZ9c7TI/edit#gid=0" width=1800px height=900px></iframe>

## The burndown chart shows if the team is on track to finish the project on time {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}
<iframe src="https://docs.google.com/spreadsheets/d/1e_8Idq3GNALJlM27_xZwYv2O2Rsih5MytwXbmZ9c7TI/edit#gid=196745742" width=1800px height=900px></iframe>

# Progress Report - Workflow Replication {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## Region-specific dendograms were generated from the k-mer analysis results {data-="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

```{r out.width="1800px", out.height="900px", fig.cap="Dendogram of SARS-CoV-2 Variants"}

load(file="presentation_files/clustering-region.RData")
ggp
```

# Progress Report - Workflow Optimization {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## Stratified random sampler was created to ensure variants were equally represented in the data sets {data-="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

```{r eval=FALSE}
#| echo: true

  # Now do stratified random sampling of <sampleSize> samples
  # seed = 10         # seed for random number generator
  # stratSize = 100  # sample size per stratum
  set.seed(seed)
  
  # Note: append row names to column for fasta sampling
  # Drop rowname col before exporting!
  metaGrouped <- metaDataAll %>%
    dplyr::group_by(variant) %>%
    tibble::rownames_to_column()
  
  # Do not preserve grouping structure (below only) to avoid NULL groups
  droppedVariants <- filter(metaGrouped, n() < stratSize)
  metaGrouped <- filter(metaGrouped, n() >= stratSize) %>%
    sample_n(stratSize)
  metaDataAll <- bind_rows(metaGrouped, droppedVariants)
  
  rm(droppedVariants)
  rm(metaGrouped)
  
  set.seed(NULL)  # reset seed (rest of code is true random)
  
  idxs <- as.integer(metaDataAll$rowname)
  fastaAll <- fastaAll[idxs]
  
  # drop rowname column
  metaDataAll = subset(metaDataAll, select = -c(rowname) )  
  
  # Drop rows with NA values and type mismatches
  # For dropping, get the idxs of the dropped rows and also drop them in fastaAll
  drop_idxs1 <- which(is.na(metaDataAll), arr.ind=TRUE)[,1]
  drop_idxs2 <- c(which(is.numeric(metaDataAll$sex)),
                  which(!(metaDataAll$sex %vin% list("Male", "Female"))))
  drop_idxs3 <- which(lengths(fastaAll) == 0)
  drop_idxs <- unique(c(drop_idxs1, drop_idxs2, drop_idxs3))
  
  # Dropping below is analogoues to select inverse
  # pmatch creates matches, val for match and NA for no match
  # We only take those without matches, i.e. those that won't be
  # dropped.
  fastaAll <- fastaAll[is.na(pmatch(1:length(fastaAll), drop_idxs))]
  metaDataAll <- metaDataAll[is.na(pmatch(1:nrow(metaDataAll), drop_idxs)),]

```

## Metadata were further sanitized for easier handling(standardized division names, country filtering, etc.){data-="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

```{r eval=FALSE}
#| echo: true

# Addon: Filter by country_exposure
  drop_idxs <- which(metaDataAll$country != country_exposure)
  fastaAll <- fastaAll[is.na(pmatch(1:length(fastaAll), drop_idxs))]
  metaDataAll <- metaDataAll[is.na(pmatch(1:nrow(metaDataAll), drop_idxs)),]
  
  rm(drop_idxs)

 # Addon: Fix regions
  metaDataAll$division_exposure <- case_match(
    metaDataAll$division_exposure,
    'Bicol' ~ 'Bicol Region',
    'Calabarzon' ~ 'CALABARZON',
    'Mimaropa' ~ 'MIMAROPA',
    'National Capital Region' ~ 'NCR',
    'Cordillera Administrative Region' ~ 'CAR',
    'Ilocos' ~ 'Ilocos Region',
    'Davao' ~ 'Davao Region',
    'Bangsamoro Autonomous Region in Muslim Mindanao' ~ 'BARMM',
    'Autonomous Region In Muslim Mindanao(ARMM)' ~ 'BARMM',
    'Soccsksargen' ~ 'SOCCSKARGEN',
    'Zamboanga' ~ 'Zamboanga Peninsula',
    'Region IV-A' ~ 'CALABARZON',
    'Region XII (Soccsksargen)' ~ 'SOCCSKARGEN',
    'Region X (Northern Mindanao)' ~ 'Northern Mindanao',
    .default = metaDataAll$division_exposure

```

## Writeback and timestamping of intermediate fasta and metadata files for further downstream analysis (standardized division names, country filtering, etc.){data-="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

```{r eval=FALSE}
#| echo: true

# Lines below creates intermediate fastaAll.fasta and metaDataAll.csv in data
  # Optimization: Check job order if want to write fasta and csv
  if (write_fastacsv) {
    print("Writing generated fasta and csv files to data...")
    
    # Write parameters used to text file
    stamp <- timeString()
    paramsLog(output_path = 'data/interm/params.txt',
              paramString = sprintf("timestamp = %s\nseed = %d, stratSize = %d",
                                    stamp, seed, stratSize))

    seqinr::write.fasta(fastaAll, names(fastaAll),
                        sprintf('data/interm/fastaAll_%s.fasta', timeString()))
    write.csv(metaDataAll,
              sprintf('data/interm/metaDataAll_%s.csv', timeString()))
    
    # Refetch fastaAll data using ape::read.FASTA to optimize for kmer analysis
    fastaAll <- read.FASTA('data/interm/fastaAll.fasta')
  }
  
  list(fastaAll, metaDataAll)
```

# Progress Report - Porting to R {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## Dimensional reduction analysis was ported from Python into R  {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

```{r eval=FALSE}
#| echo: true

# -----Functions-----

# Function for saving plots as PNG and HTML
save_plot <- function(method, k, p) {
  # Save as PNG
  filename <- paste0(method, "-", k, ".png")
  path <- "./results/dim-reduce/R/"
  ggsave(filename, p, path, device = "png", dpi = 300)
  
  # Convert ggplot object to ggplotly
  p <- ggplotly(p)
  
  # Save as HTML
  htmlFile <- paste0("./results/dim-reduce/R/", method, "-", k, ".html")
  htmlwidgets::saveWidget(p, file = htmlFile, selfcontained = TRUE)
  
  # Save as RData
  RDataFile <- paste0(method, "-", k, ".RData")
  save(p, file = file.path('results/dim-reduce/R/', RDataFile))
}

# Function for pre-processing and scaling of data 
process_data <- function(data) {
  # Drop metadata, NAs, etc.
  # Include k-mers
  
  # Determine the columns to use
  slice_col <- which(colnames(data) == "strain")
  X <- data[, 2:(slice_col - 1)]
  target <- data$variant
  
  # Check for columns that have zero variance for PCA
  non_zero_var_cols <- apply(X, 2, var) > 0
  new_X <- X[, non_zero_var_cols]
  
  if (ncol(new_X) < 2) {
    stop("Insufficient columns with non-zero variance for PCA.")
  }
  
  # Scale data
  x <- scale(new_X) # can be optional
  
  return(list(X = X, x = x, target = target))
}

# Function that performs PCA
pca_fn <- function(x) {
  pca_df <- prcomp(x, center = TRUE, scale. = TRUE)
  return(pca_df)
}

# Function that plots PCA results
pca_plot <- function(pca_df, target, k) {
  # Plot two principal components
  PC <- as.data.frame(pca_df$x[, 1:2])
  colnames(PC) <- c("Principal Component 1", "Principal Component 2")
  FDF <- cbind(PC, variant = target)
  
  # Create ggplot object
  p <- ggplot(FDF, aes(x = `Principal Component 1`, y = `Principal Component 2`, color = variant)) +
    geom_point(size = 4, alpha = 0.5) +
    xlab(paste("PC 1 (", round(summary(pca_df)$importance[2,1]  * 100, 2), "% explained variance)")) +
    ylab(paste("PC 2 (", round(summary(pca_df)$importance[2,2] * 100, 2), "% explained variance)")) +
    labs(color = "Label") +
    scale_color_brewer(palette = "Set1")
  
  # Save plot as PNG and HTML
  save_plot("pca", k, p)
}

# Function that performs t-SNE
tsne_fn <- function(pca_results) {
  set.seed(tsne_seed)
  tsne_df <- Rtsne(pca_results, dims = tsne_dims, perplexity = tsne_perplexity, max_iter = tsne_max_iter, check_duplicates = FALSE, pca = FALSE)
  return(tsne_df)
}

# Function that plots t-SNE results
tsne_plot <- function(tsne_df, target, k) {
  df <- data.frame(X1 = tsne_df$Y[, 1], X2 = tsne_df$Y[, 2], target = target)
  
  # Create ggplot object
  p <- ggplot(df, aes(x = X1, y = X2, color = target)) +
    geom_point() +
    xlab("TSNE-2D-1") +
    ylab("TSNE-2D-2") +
    labs(color = "Label") +
    scale_color_brewer(palette = "Set1")
  
  # Save plot as PNG and HTML
  save_plot("tsne", k, p)
}

# Function that performs UMAP
umap_fn <- function(x) {
  umap_df <- umap(x, n_neighbors = umap_n_neighbors, metric = umap_metric, min_dist = umap_min_dist, seed = umap_seed)
  return(umap_df)
}

# Function that plots UMAP results
umap_plot <- function(umap_df, target, k) {
  emb <- umap_df$layout
  
  X_o <- emb[, 1]
  Y_o <- emb[, 2]
  
  # Create ggplot object
  p <- ggplot(data = as.data.frame(emb), aes(x = X_o, y = Y_o, color = target)) +
    geom_point() +
    xlab("UMAP_1") +
    ylab("UMAP_2") +
    labs(color = "Label") +
    scale_color_brewer(palette = "Set1")
  
  # Save plot as PNG and HTML
  save_plot("umap", k, p)
}

# -----END of Functions-----

# -----START-----

# Set k for k-mer analysis
k <- 7

# Set paths
data_path <- "./data/archive/"
results_path <- "./results/dim-reduce/R/"

# Loading the data file
data <- read.csv(paste0(data_path, "kmer_", k, ".csv"))

# Define t-SNE and UMAP parameters
tsne_seed <- 10
tsne_dims <- 2
tsne_perplexity <- 40
tsne_max_iter <- 300
umap_seed <- 10
umap_n_neighbors <- 15
umap_metric <- "euclidean"
umap_min_dist <- 0.1

# Process the data
data <- process_data(data)

# Perform PCA
pca_df <- pca_fn(data$x)

# Plot PCA results
pca_plot(pca_df, data$target, k)

# Perform t-SNE using PCA results
tsne_df <- tsne_fn(pca_df$x)

# Plot t-SNE results
tsne_plot(tsne_df, data$target, k)

# Perform UMAP
umap_df <- umap_fn(data$x)

# Plot UMAP results
umap_plot(umap_df, data$target, k)

# -----END-----
```

## PCA plots (k=3) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="PCA plot of 3-mers"}

load(file="presentation_files/pca-3.RData")
p
```

## PCA plots (k=5) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="PCA plot of 5-mers"}

load(file="presentation_files/pca-5.RData")
p
```


## PCA plots (k=7) generated after porting to R were similar to those previously generated in Python  {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="PCA plot of 7-mers"}

load(file="presentation_files/pca-7.RData")
p
```


## tSNE plots (k=3) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="tSNE plot of 3-mers"}

load(file="presentation_files/tSNE-3.RData")
p
```

## tSNE plots (k=5) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="tSNE plot of 5-mers"}

load(file="presentation_files/tSNE-5.RData")
p
```


## tSNE plots (k=7) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="tSNE plot of 7-mers"}

load(file="presentation_files/tSNE-7.RData")
p
```

## UMAP plots (k=3) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="UMAP plot of 3-mers"}

load(file="presentation_files/umap-3.RData")
p
```

## UMAP plots (k=5) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="UMAP plot of 5-mers"}

load(file="presentation_files/umap-5.RData")
p
```


## UMAP plots (k=7) generated after porting to R were similar to those previously generated in Python {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

```{r out.width="1800px", out.height="900px", fig.cap="UMAP plot of 7-mers"}

load(file="presentation_files/umap-7.RData")
p
```


# Progress Report - Container Creation for Benchmarking{background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## Created bootable Ubuntu USB for performance evaluation on different machines {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

- Set-up of bootable Ubuntu USB with Docker
- Include yaml for standardization of environment

# Next Steps {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## Future Plans {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}    

- Goals for Next Week
  - Benchmark Workflow with Spectre and Meltdown Patches Enabled vs. Disabled in Intel Core/AMD Ryzen processors and Windows/Linux OS 
  - Benchmark Computations using OpenBLAS/ATLAS/AMD BLISS/ Intel MKL
  
- Future Goals
  - Document and Analyze Benchmarking Results
  - Scale up Data and Run in HPC

# References {background-color="#447099" data-background="presentation_files/img/PGCTitleSlideDark.svg" transition="slide-in"}

## References {data-background="presentation_files/img/PGCSlideLight.svg" transition="fade-in slide-out" transition-speed="slow"}

- Research Article:

  - <https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0285719>

- Image Sources:
  - <https://i.ytimg.com/vi/0WDhKCPtbng/maxresdefault.jpg>
  - <https://web.archive.org/web/20180620212658/https://danielmiessler.com/images/Screen-Shot-2018-01-05-at-08.29.00.png>
  - <https://www.docker.com/wp-content/uploads/2022/03/vertical-logo-monochromatic.png>
  - <https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/1280px-Git-logo.svg.png>
